package jdbc;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;

public class Book_Main {

	public Connection conn;//DB에 연결하기위한 객체 인터페이스. 메서드에서 계속 가져다 쓰기때문에 static 전역변수로 선언하여 공유
	public PreparedStatement pst; //DB와 자바간의 통신 통로역할
	public ResultSet rs;
	   public void connection() {
		      try {

		         // 1. JDBC 드라이버를 로딩(동적 로딩)파일을 계속 확인하는게 아니라서 빨간줄 계속 (예외처리)
		         Class.forName("oracle.jdbc.driver.OracleDriver");
		         ///////////////////////////////////////////////////////////////////////

		         // 2. DB연결
		         // 외부에서 접속하기 위해서는 localhost 부분을 ip주소로 변경
		         String url = "jdbc:oracle:thin:@localhost:1521:xe";
		         String user = "hr";
		         String password = "hr";
		         conn = DriverManager.getConnection(url, user, password);

		         if (conn == null) {
		            System.out.println("DB 연결 실패");
		         } else {
		            System.out.println("DB 연결 성공");
		         }
		         // 오류 출력문: ClassNotFoundException: 클래스 파일을 찾지 못했을 경우
		      } catch (ClassNotFoundException e) {
		         // 오류 메시지 출력
		         e.printStackTrace();

		      } catch (SQLException e) {
		         // TODO Auto-generated catch block
		         e.printStackTrace();
		      }
		   }

		   // DB종료 기능
		   public void close() {
		      // 6.DB관련 연결객체 종료
		      // 사용한 자원은 꼭 반환하여준다
		      // Connection, PreparedStatement를 사용했기 때문에 종료해줘야함
		      try {
		         if (rs != null) {
		            rs.close();
		         }
		         if (pst != null) {
		            pst.close();
		         }
		         if (conn != null) {
		            conn.close();
		         }

		      } catch (SQLException e) {
		         e.printStackTrace();
		      }

		   }
	
	public static void main(String[] args) {
		// 1. 아래와 같이 메뉴를 출력하는 프로그램을 작성하시오
		// ======================도서 관리 프로그램
		// 1.전체도서검색 2.도서검색 3.도서입고 4.도서수정 5.도서삭제 6.종료>>
		Scanner sc = new Scanner(System.in);
		boolean isPlay=true;
		
		//DB관련 기능을 가진 객체 생성
		BookDAO dao=new BookDAO();
		
		System.out.println("=====도서관리프로그램 입니다.=====");
		while(isPlay) {
		System.out.println("1.전체도서검색 2.도서검색 3.도서입고 4.도서수정 5.도서삭제 6.종료>>");
		int select = sc.nextInt();

		
		switch (select) {
		// ===================전체도서검색=======================
		case 1://전체도서검색
			ArrayList<BookVO> books=dao.selectBookAll();
			for(int i=0; i<books.size(); i++) {
				System.out.println(books.get(i));
			}
			
			break;

		// ===================도서검색==========================
		case 2://도서검색

			break;
		// ===================도서입고==========================
		case 3://도서입고
			//코드, 도서명, 저자, 출판사, 가격을 db에 저장하시오
			System.out.println("도서코드: ");
			String code=sc.next();
			System.out.println("도서명: ");
			String title=sc.next();
			System.out.println("저자: ");
			String author=sc.next();
			System.out.println("출판사: ");
			String pub=sc.next();
			System.out.println("가격: ");
			int price=sc.nextInt();
			
			BookVO book=new BookVO(code, title, author,pub, price);
			dao.insertBook(book);
			System.out.println("새로운 도서가 등록되었습니다.");
			
			try { //고정적으로 계속 쓰이는것 복사코드
				Connection();
				
				String sql="insert into BOOKINFO values(book_num.nextval,?,?,?,?.?,sysdate);"; 
				pst = conn.prepareStatement(sql);
				pst.setString(1,book.getBook_code());
				pst.setString(2,book.getBook_title());
				pst.setString(3,book.getBook_author());
				pst.setString(4,book.getBook_Pub());
				pst.setInt(5,book.getBook_price());
				
				//통로를 만들었으니 이제 실핼할수있는 메서드를 만들어야함
				//db의 변화 ex)String sql="insert into member values(?,?,?)";
				//insert delete update 같은경우 executeUpdate() 메서드 사용
				//나머지 select는  executeupQuery() 사용
				
				//4, Query 실행
				pst.executeUpdate();
			}
				
		
			catch (SQLException e) {
				e.printStackTrace();
			} finally {//finally: try~catch문과는 상관없이 무조건 실행하는 구문
			
				
				//6. db관련 연결객체 종료
				//->종료하지 않을 경우 연결된 객체들이 쌓이게 되면서 db연결에 문제가 발생
				//Connection prepareStatement 는 무조건 종료를 해줘야함=반환해줘야함
				
			    try {
					if(pst != null) {
						pst.close();
					}
					if(conn !=null) {
						conn.close();
					}
				}  catch (SQLException e) {
					e.printStackTrace();
				}	
			}
			
			
			break;
		// ===================도서수정==========================
		case 4://도서수정

			break;
		// ===================도서삭제==========================
		case 5:// 도서삭제
			System.out.println("삭제할 도서의 책명을 입력해주세요");
			break;
		// ===================종료============================
		case 6:// 종료
			System.out.println("도서 프로그램을 종료합니다");
			isPlay = false;
		default:
		  }//switch
	  }//while

	}

}


